Object subclass: #Address	instanceVariableNames: 'id streetName streetNumber town zipCode province'	classVariableNames: ''	poolDictionaries: ''	category: 'IS1-CustomerImport-Model'!!Address methodsFor: 'twon' stamp: 'HernanWilkinson 10/28/2016 16:07'!town: aTown 	town := aTown! !!Address methodsFor: 'twon' stamp: 'HernanWilkinson 10/28/2016 16:12'!town	^town! !!Address methodsFor: 'zip code' stamp: 'HernanWilkinson 10/28/2016 16:13'!zipCode	^zipCode! !!Address methodsFor: 'zip code' stamp: 'HernanWilkinson 10/28/2016 16:08'!zipCode: aZipCode 	zipCode := aZipCode! !!Address methodsFor: 'street' stamp: 'HernanWilkinson 10/28/2016 16:12'!streetName	^streetName ! !!Address methodsFor: 'street' stamp: 'HernanWilkinson 10/28/2016 13:27'!streetName: aStreetName 	streetName := aStreetName ! !!Address methodsFor: 'street' stamp: 'HernanWilkinson 10/28/2016 13:27'!streetNumber: aStreetNumber 	streetNumber := aStreetNumber ! !!Address methodsFor: 'street' stamp: 'HernanWilkinson 10/28/2016 16:12'!streetNumber	^streetNumber ! !!Address methodsFor: 'as yet unclassified' stamp: 'HernanWilkinson 11/1/2016 10:06'!isAt: aStreetName	^streetName = aStreetName ! !!Address methodsFor: 'province' stamp: 'HernanWilkinson 10/28/2016 16:08'!province: aProvince 	province := aProvince	! !!Address methodsFor: 'province' stamp: 'HernanWilkinson 10/28/2016 16:11'!province	^province! !Object subclass: #Customer	instanceVariableNames: 'id firstName lastName identificationType identificationNumber addresses'	classVariableNames: ''	poolDictionaries: ''	category: 'IS1-CustomerImport-Model'!!Customer methodsFor: 'as yet unclassified' stamp: 'HernanWilkinson 11/1/2016 10:05'!addressAt: aStreetName ifNone: noneClosure 		^addresses detect: [ :anAddress | anAddress isAt: aStreetName ] ifNone: noneClosure ! !!Customer methodsFor: 'name' stamp: 'HernanWilkinson 10/28/2016 13:09'!lastName: aLastName 	lastName := aLastName! !!Customer methodsFor: 'name' stamp: 'HernanWilkinson 10/28/2016 13:09'!firstName: aName 	firstName := aName! !!Customer methodsFor: 'name' stamp: 'HernanWilkinson 10/28/2016 16:15'!firstName		^firstName ! !!Customer methodsFor: 'name' stamp: 'HernanWilkinson 10/28/2016 16:15'!lastName	^lastName ! !!Customer methodsFor: 'identification' stamp: 'HernanWilkinson 10/28/2016 16:13'!identificationNumber		^identificationNumber ! !!Customer methodsFor: 'identification' stamp: 'HernanWilkinson 10/28/2016 13:10'!identificationNumber: anIdentificationNumber 	identificationNumber := anIdentificationNumber! !!Customer methodsFor: 'identification' stamp: 'HernanWilkinson 10/28/2016 13:10'!identificationType: anIdentificationType 	identificationType := anIdentificationType! !!Customer methodsFor: 'identification' stamp: 'HernanWilkinson 10/28/2016 16:13'!identificationType		^identificationType ! !!Customer methodsFor: 'addresses' stamp: 'HernanWilkinson 11/1/2016 09:43'!numberOfAddresses		^addresses size! !!Customer methodsFor: 'addresses' stamp: 'HernanWilkinson 10/28/2016 13:25'!addresses	^ addresses! !!Customer methodsFor: 'addresses' stamp: 'HernanWilkinson 10/28/2016 13:27'!addAddress: anAddress 	addresses add: anAddress ! !!Customer methodsFor: 'initialization' stamp: 'HernanWilkinson 10/28/2016 13:26'!initialize	super initialize.	addresses := OrderedCollection new.! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!Customer class	instanceVariableNames: ''!!Customer class methodsFor: 'importing' stamp: 'HernanWilkinson 11/1/2016 08:39'!importCustomers	"	self importCustomers	"	| inputStream session newCustomer line |		inputStream := FileStream fileNamed: 'input.txt'.	session := DataBaseSession for: (Array 		with: (ClassMapping 			withDefaultTableNameFor: Address 			mappingAll: (Array 				with: (EmbededMapping withDefaultFieldNameFor: #streetName)				with: (EmbededMapping withDefaultFieldNameFor: #streetNumber)				with: (EmbededMapping withDefaultFieldNameFor: #town)				with: (EmbededMapping withDefaultFieldNameFor: #zipCode)				with: (EmbededMapping withDefaultFieldNameFor: #province))) 		with: (ClassMapping 			withDefaultTableNameFor: Customer 			mappingAll: (Array 				with: (EmbededMapping withDefaultFieldNameFor: #firstName)				with: (EmbededMapping withDefaultFieldNameFor: #lastName)				with: (EmbededMapping withDefaultFieldNameFor: #identificationType)				with: (EmbededMapping withDefaultFieldNameFor: #identificationNumber)				with: (OneToManyMapping withDefaultFieldNameFor: #addresses ofType: Address)))).	session open.	session beginTransaction.	line := inputStream nextLine.	[ line notNil ] whileTrue: [ 		(line beginsWith: 'C') ifTrue: [ | customerData |			customerData := line substrings: {$,}.			newCustomer := Customer new.			newCustomer firstName: customerData second.			newCustomer lastName: customerData third.			newCustomer identificationType: customerData fourth.			newCustomer identificationNumber: customerData fourth.			session persist: newCustomer ].				(line beginsWith: 'A') ifTrue: [ | addressData newAddress |			addressData := line substrings: { $, }.			newAddress := Address new.			newAddress streetName: addressData second.			newAddress streetNumber: addressData third asInteger. 			newAddress town: addressData fourth.			newAddress zipCode: addressData fifth asInteger.			newAddress province: addressData fourth.			newCustomer addAddress: newAddress. ].						line := inputStream nextLine. ].					session commit.		session close.				inputStream close.		! !TestCase subclass: #CustomerImportTest	instanceVariableNames: 'session importer'	classVariableNames: ''	poolDictionaries: ''	category: 'IS1-CustomerImport-Model'!!CustomerImportTest methodsFor: 'tests' stamp: 'JEC 6/24/2018 13:58'!test06CustomerFieldsQuantityIsLessThanFiveThrowsException	| invalidData |		invalidData := ReadStream on: 'C,Pepe,Sanchez,D'.		self		should: [ self importCustomersFrom: invalidData on: session ]		raise: Error - MessageNotUnderstood		withExceptionDo: [ :anError | 			self assert: CustomerImporter WrongCustomerFieldQuantityErrorMessage = anError messageText.			self assert: (session selectAllOfType: Customer) isEmpty. ].! !!CustomerImportTest methodsFor: 'tests' stamp: 'JEC 6/24/2018 13:05'!test02ReadAddressPriorACustomerThrowsAnException	| invalidData |	invalidData := ReadStream on: 'A,San Martin,3322,Olivos,1636,BsAs'.	self		should: [ self importCustomersFrom: invalidData on: session ]		raise: Error - MessageNotUnderstood		withExceptionDo: [ :anError |			self assert: CustomerImporter NoCustomerAssignedToThisAddressErrorMessage = anError messageText.			self assert: (session selectAllOfType: Customer) isEmpty. ].! !!CustomerImportTest methodsFor: 'tests' stamp: 'JEC 6/24/2018 13:07'!test03FirstFieldBeginsWithADifferentLetterThanCOrAThrowsException	| invalidData |		invalidData := ReadStream on: 'P,San Martin,3322,Olivos,1636,BsAs'.	self		should: [ self importCustomersFrom: invalidData on: session ]		raise: Error - MessageNotUnderstood		withExceptionDo: [ :anError |			self assert: CustomerImporter NotACustomerNorAnAddressErrorMessage = anError messageText.			self assert: (session selectAllOfType: Customer) isEmpty. ].! !!CustomerImportTest methodsFor: 'tests' stamp: 'JEC 6/24/2018 13:17'!test05FirstFieldBeginsWithAButIsALongerWordThrowsException	| invalidData customerClosure idType idNumber |		invalidData := ReadStream on: 'C,Pepe,Sanchez,D,22333444AC,San Martin,3322,Olivos,1636,BsAs'.	idType := 'D'.	idNumber := '22333444'.	customerClosure := [ self customerIdentifiedAs: idType numbered: idNumber ].	self		should: [ self importCustomersFrom: invalidData on: session ]		raise: Error - MessageNotUnderstood		withExceptionDo: [ :anError |			self assert: CustomerImporter NotACustomerNorAnAddressErrorMessage = anError messageText.			self assert: (session selectAllOfType: Customer) size equals: 1.			self assert: customerClosure value isNamed: 'Pepe' lastName: 'Sanchez' identfiedAs: idType withNumber: idNumber andNumberOfAddresses: 0. ].! !!CustomerImportTest methodsFor: 'tests' stamp: 'JEC 6/24/2018 14:34'!test10WhenThereIsANullFieldThrowsException	| invalidData |		invalidData := ReadStream on: 'C,null,Sanchez,D,22333444'.	self		should: [ self importCustomersFrom: invalidData on: session ]		raise: Error - MessageNotUnderstood		withExceptionDo: [ :anError | 			self assert: CustomerImporter NullFieldErrorMessage = anError messageText.			self assert: (session selectAllOfType: Customer) isEmpty. ].! !!CustomerImportTest methodsFor: 'tests' stamp: 'JEC 6/24/2018 13:08'!test04FirstFieldBeginsWithCButIsALongerWordThrowsException	| invalidData |		invalidData := ReadStream on: 'CA,Pepe,Sanchez,D,22333444A,San Martin,3322,Olivos,1636,BsAs'.	self		should: [ self importCustomersFrom: invalidData on: session ]		raise: Error - MessageNotUnderstood		withExceptionDo: [ :anError |			self assert: CustomerImporter NotACustomerNorAnAddressErrorMessage = anError messageText.			self assert: (session selectAllOfType: Customer) isEmpty. ].! !!CustomerImportTest methodsFor: 'tests' stamp: 'JEC 6/24/2018 14:12'!test08AddressFieldsQuantityIsLessThanSixThrowsException	| invalidData customerClosure idType idNumber |		invalidData := ReadStream on: 'C,Pepe,Sanchez,D,22333444A,San Martin,3322,Olivos,1636'.	idType := 'D'.	idNumber := '22333444'.	customerClosure := [ self customerIdentifiedAs: idType numbered: idNumber ].		self		should: [ self importCustomersFrom: invalidData on: session ]		raise: Error - MessageNotUnderstood		withExceptionDo: [ :anError | 			self assert: CustomerImporter WrongAddressFieldQuantityErrorMessage = anError messageText.			self assert: (session selectAllOfType: Customer) size equals: 1.			self assert: customerClosure value isNamed: 'Pepe' lastName: 'Sanchez' identfiedAs: idType withNumber: idNumber andNumberOfAddresses: 0. ].! !!CustomerImportTest methodsFor: 'tests' stamp: 'JEC 6/24/2018 14:32'!test09AddressFieldsQuantityIsMoreThanSixThrowsException	| invalidData customerClosure idType idNumber |		invalidData := ReadStream on: 'C,Pepe,Sanchez,D,22333444A,San Martin,3322,Olivos,1636,BsAs,WrongField'.	idType := 'D'.	idNumber := '22333444'.	customerClosure := [ self customerIdentifiedAs: idType numbered: idNumber ].	self		should: [ self importCustomersFrom: invalidData on: session ]		raise: Error - MessageNotUnderstood		withExceptionDo: [ :anError | 			self assert: CustomerImporter WrongAddressFieldQuantityErrorMessage = anError messageText.			self assert: (session selectAllOfType: Customer) size equals: 1.			self assert: customerClosure value isNamed: 'Pepe' lastName: 'Sanchez' identfiedAs: idType withNumber: idNumber andNumberOfAddresses: 0. ].! !!CustomerImportTest methodsFor: 'tests' stamp: 'JEC 6/24/2018 13:58'!test07CustomerFieldsQuantityIsMoreThanFiveThrowsException	| invalidData |		invalidData := ReadStream on: 'C,Pepe,Sanchez,D,22333444,WrongField'.	self		should: [ self importCustomersFrom: invalidData on: session ]		raise: Error - MessageNotUnderstood		withExceptionDo: [ :anError | 			self assert: CustomerImporter WrongCustomerFieldQuantityErrorMessage = anError messageText.			self assert: (session selectAllOfType: Customer) isEmpty. ].! !!CustomerImportTest methodsFor: 'asserting' stamp: 'HernanWilkinson 11/1/2016 15:16'!assertPepeSanchezWasImportedCorrectly	| customer idType idNumber |	idType := 'D'.	idNumber := '22333444'.	customer := self customerIdentifiedAs: idType numbered: idNumber.		self assert: customer isNamed: 'Pepe' lastName: 'Sanchez' identfiedAs: idType withNumber: idNumber andNumberOfAddresses: 2.	self assert: customer hasAddressAt: 'San Martin' number: 3322 in: 'Olivos' zipCode: 1636 province: 'BsAs'.	self assert: customer hasAddressAt: 'Maipu' number: 888 in: 'Florida' zipCode: 1122 province: 'Buenos Aires'! !!CustomerImportTest methodsFor: 'asserting' stamp: 'HernanWilkinson 11/1/2016 15:14'!assertJuanPerezWasImportedCorrectly		| customer idType idNumber |		idType := 'C'.	idNumber := '23-25666777-9'.	customer := self customerIdentifiedAs: idType numbered: idNumber.		self assert: customer isNamed: 'Juan' lastName: 'Perez' identfiedAs: idType withNumber: idNumber andNumberOfAddresses: 1.	self assert: customer hasAddressAt: 'Alem' number: 1122 in: 'CABA' zipCode: 1001 province: 'CABA'.	! !!CustomerImportTest methodsFor: 'asserting' stamp: 'HernanWilkinson 11/1/2016 10:56'!assert: customer isNamed: firstName lastName: lastName identfiedAs: idType withNumber: idNumber andNumberOfAddresses: addressesSize	self assert: customer firstName equals: firstName.	self assert: customer lastName equals: lastName.	self assert: customer identificationType equals: idType.	self assert: customer identificationNumber equals: idNumber.	self assert: customer numberOfAddresses equals: addressesSize .! !!CustomerImportTest methodsFor: 'asserting' stamp: 'HernanWilkinson 11/1/2016 15:13'!assertImportedCustomersSizeIsCorrect		self assert: (session selectAllOfType: Customer) size equals: 2.	! !!CustomerImportTest methodsFor: 'asserting' stamp: 'HernanWilkinson 11/1/2016 11:00'!assert: customer hasAddressAt: streetName number: streetNumber in: town zipCode: zipCode province: province	| address |		address := customer addressAt: streetName ifNone: [ self fail ].	self assert: address streetName equals: streetName.	self assert: address streetNumber equals: streetNumber.	self assert: address town equals: town.	self assert: address zipCode equals: zipCode.	self assert: address province equals: province.	! !!CustomerImportTest methodsFor: 'test data' stamp: 'HernanWilkinson 11/1/2016 15:17'!validTestData	^ ReadStream on:'C,Pepe,Sanchez,D,22333444A,San Martin,3322,Olivos,1636,BsAsA,Maipu,888,Florida,1122,Buenos AiresC,Juan,Perez,C,23-25666777-9A,Alem,1122,CABA,1001,CABA'! !!CustomerImportTest methodsFor: 'testing' stamp: 'JEC 6/23/2018 15:27'!test01ImportCustomers	self importCustomersFrom: self validTestData on: session.	self assertImportedCustomersSizeIsCorrect.	self assertPepeSanchezWasImportedCorrectly.	self assertJuanPerezWasImportedCorrectly! !!CustomerImportTest methodsFor: 'setup-teardown' stamp: 'HernanWilkinson 11/1/2016 15:24'!customerMapping	^ ClassMapping		withDefaultTableNameFor: Customer		mappingAll:			(Array				with: (EmbededMapping withDefaultFieldNameFor: #firstName)				with: (EmbededMapping withDefaultFieldNameFor: #lastName)				with: (EmbededMapping withDefaultFieldNameFor: #identificationType)				with: (EmbededMapping withDefaultFieldNameFor: #identificationNumber)				with: (OneToManyMapping withDefaultFieldNameFor: #addresses ofType: Address))! !!CustomerImportTest methodsFor: 'setup-teardown' stamp: 'JoelEstebanCamera 6/21/2018 20:45'!setUp	session := DataBaseSession for: (Array with: self addressMapping with: self customerMapping).	session open.	session beginTransaction! !!CustomerImportTest methodsFor: 'setup-teardown' stamp: 'HernanWilkinson 11/1/2016 15:23'!addressMapping	^ ClassMapping		withDefaultTableNameFor: Address		mappingAll:			(Array				with: (EmbededMapping withDefaultFieldNameFor: #streetName)				with: (EmbededMapping withDefaultFieldNameFor: #streetNumber)				with: (EmbededMapping withDefaultFieldNameFor: #town)				with: (EmbededMapping withDefaultFieldNameFor: #zipCode)				with: (EmbededMapping withDefaultFieldNameFor: #province))! !!CustomerImportTest methodsFor: 'setup-teardown' stamp: 'HernanWilkinson 11/1/2016 15:23'!tearDown	session commit.	session close! !!CustomerImportTest methodsFor: 'importing' stamp: 'JoelEstebanCamera 6/21/2018 20:39'!importCustomersFrom: inputStream on: aSession	(CustomerImporter with: inputStream and: aSession) value.! !!CustomerImportTest methodsFor: 'importing' stamp: 'HernanWilkinson 11/1/2016 15:17'!customerIdentifiedAs: anIdentifycationType numbered: anIdentificationNumber		|customers |		customers := session 		select: [ :aCustomer | aCustomer identificationType = anIdentifycationType and: [ aCustomer identificationNumber = anIdentificationNumber ] ]		ofType: Customer.			self assert: customers size equals: 1.		^customers anyOne.! !Object subclass: #CustomerImporter	instanceVariableNames: 'line session inputStream newCustomer'	classVariableNames: ''	poolDictionaries: ''	category: 'IS1-CustomerImport-Model'!!CustomerImporter methodsFor: 'assertions' stamp: 'JEC 6/24/2018 14:30'!assertAddressFieldsAreSix	self nextLineToSubstrings size = 6		ifFalse: [ self error: self class WrongAddressFieldQuantityErrorMessage ]! !!CustomerImporter methodsFor: 'assertions' stamp: 'JEC 6/24/2018 13:59'!assertCustomerFieldsQuantityIsFive	self nextLineToSubstrings size = 5		ifFalse: [ self error: self class WrongCustomerFieldQuantityErrorMessage ]! !!CustomerImporter methodsFor: 'assertions' stamp: 'JEC 6/24/2018 12:24'!assertCustomerOrAddress		| aRecord typeField isSizeOne isACustomerOrAnAddress |		aRecord := self nextLineToSubstrings.	typeField := aRecord first.	isSizeOne := typeField size = 1.	isACustomerOrAnAddress := (typeField beginsWith: 'C') or: [ typeField beginsWith: 'A' ].		(isSizeOne and: [ isACustomerOrAnAddress ])		ifFalse: [ self error: self class NotACustomerNorAnAddressErrorMessage ]! !!CustomerImporter methodsFor: 'importing' stamp: 'JoelEstebanCamera 6/21/2018 20:00'!isAddress	^ line beginsWith: 'A'! !!CustomerImporter methodsFor: 'importing' stamp: 'JEC 6/24/2018 12:51'!isCustomer	^ line beginsWith: 'C'! !!CustomerImporter methodsFor: 'importing' stamp: 'JEC 6/24/2018 12:51'!value	[ line := inputStream nextLine.	  line notNil ]		whileTrue: [			self assertCustomerOrAddress.			self isCustomer				ifTrue: [ self recordCustomer ].			self isAddress				ifTrue: [ self recordAddress ] ].! !!CustomerImporter methodsFor: 'importing' stamp: 'JEC 6/24/2018 12:52'!recordCustomer	| aRecord |		self assertCustomerFieldsQuantityIsFive.		aRecord := self nextLineToSubstrings.	newCustomer := Customer new.	newCustomer firstName: aRecord second.	newCustomer lastName: aRecord third.	newCustomer identificationType: aRecord fourth.	newCustomer identificationNumber: aRecord fifth.	session persist: newCustomer.! !!CustomerImporter methodsFor: 'importing' stamp: 'JEC 6/24/2018 14:05'!recordAddress	| newAddress aRecord |	newCustomer ifNil: [ self error: self class NoCustomerAssignedToThisAddressErrorMessage ].	self assertAddressFieldsAreSix.	aRecord := self nextLineToSubstrings.	newAddress := Address new.	newAddress streetName: aRecord second.	newAddress streetNumber: aRecord third asInteger.	newAddress town: aRecord fourth.	newAddress zipCode: aRecord fifth asInteger.	newAddress province: aRecord sixth.	newCustomer addAddress: newAddress.! !!CustomerImporter methodsFor: 'importing' stamp: 'JoelEstebanCamera 6/21/2018 20:37'!nextLineToSubstrings		^line substrings: {$,}.! !!CustomerImporter methodsFor: 'initialization' stamp: 'JoelEstebanCamera 6/21/2018 20:36'!initializeWith: anInputStream and: aSession	inputStream := anInputStream.	session := aSession.! !!CustomerImporter methodsFor: 'as yet unclassified' stamp: 'JEC 6/23/2018 15:19'!notCustomerNorAddress	self shouldBeImplemented.! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!CustomerImporter class	instanceVariableNames: ''!!CustomerImporter class methodsFor: 'instance creation' stamp: 'JoelEstebanCamera 6/21/2018 20:35'!with: anInputStream and: aSession	^ self new initializeWith: anInputStream and: aSession.! !!CustomerImporter class methodsFor: 'error messages' stamp: 'JEC 6/24/2018 14:34'!NullFieldErrorMessage	^ 'There is a null field'! !!CustomerImporter class methodsFor: 'error messages' stamp: 'JEC 6/23/2018 15:16'!NotACustomerNorAnAddressErrorMessage	^ 'Is not a customer nor an address'.! !!CustomerImporter class methodsFor: 'error messages' stamp: 'JEC 6/24/2018 14:00'!WrongCustomerFieldQuantityErrorMessage	^ 'Wrong customer fields quantity'! !!CustomerImporter class methodsFor: 'error messages' stamp: 'JEC 6/23/2018 15:16'!NoCustomerAssignedToThisAddressErrorMessage	^ 'No customer assigned to this address'.! !!CustomerImporter class methodsFor: 'error messages' stamp: 'JEC 6/24/2018 14:02'!WrongAddressFieldQuantityErrorMessage	^ 'Wrong address fields quantity'! !