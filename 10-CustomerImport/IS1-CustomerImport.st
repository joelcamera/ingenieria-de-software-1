Object subclass: #Address	instanceVariableNames: 'id streetName streetNumber town zipCode province'	classVariableNames: ''	poolDictionaries: ''	category: 'IS1-CustomerImport-Model'!!Address methodsFor: 'twon' stamp: 'HernanWilkinson 10/28/2016 16:12'!town	^town! !!Address methodsFor: 'twon' stamp: 'HernanWilkinson 10/28/2016 16:07'!town: aTown 	town := aTown! !!Address methodsFor: 'street' stamp: 'HernanWilkinson 10/28/2016 16:12'!streetNumber	^streetNumber ! !!Address methodsFor: 'street' stamp: 'HernanWilkinson 10/28/2016 13:27'!streetNumber: aStreetNumber 	streetNumber := aStreetNumber ! !!Address methodsFor: 'street' stamp: 'HernanWilkinson 10/28/2016 13:27'!streetName: aStreetName 	streetName := aStreetName ! !!Address methodsFor: 'street' stamp: 'HernanWilkinson 10/28/2016 16:12'!streetName	^streetName ! !!Address methodsFor: 'province' stamp: 'HernanWilkinson 10/28/2016 16:08'!province: aProvince 	province := aProvince	! !!Address methodsFor: 'province' stamp: 'HernanWilkinson 10/28/2016 16:11'!province	^province! !!Address methodsFor: 'initialization' stamp: 'GAC 6/18/2018 23:03'!initializeStreetName: aStreetName streetNumber: aStreetNumber town: aTown province: aProvince zipCode: aZipCode 	streetName := aStreetName.	streetNumber := aStreetNumber.	town := aTown.	province := aProvince.	zipCode := aZipCode.		! !!Address methodsFor: 'zip code' stamp: 'HernanWilkinson 10/28/2016 16:13'!zipCode	^zipCode! !!Address methodsFor: 'zip code' stamp: 'GAC 6/19/2018 02:34'!sameData: aAddress	^ ((((streetName = aAddress streetName ) 		and: [streetNumber = aAddress streetNumber ])		and: [province = aAddress province])		and: [zipCode  = aAddress zipCode])		and: [town = aAddress town].! !!Address methodsFor: 'zip code' stamp: 'GAC 6/19/2018 02:18'!printString	 ^ streetName,' ',streetNumber printString,' ',town,' ',zipCode printString,' ',province,'|'. ! !!Address methodsFor: 'zip code' stamp: 'HernanWilkinson 10/28/2016 16:08'!zipCode: aZipCode 	zipCode := aZipCode! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!Address class	instanceVariableNames: ''!!Address class methodsFor: 'new' stamp: 'GAC 6/19/2018 01:07'!streetName: aStreetName streetNumber: aStreetNumber town: aTown province: aProvince zipCode: aZipCode 	|aAddress|		aAddress := self new.	^ aAddress initializeStreetName: aStreetName streetNumber: aStreetNumber town: aTown province: aProvince zipCode: aZipCode.	! !Object subclass: #Customer	instanceVariableNames: 'id firstName lastName identificationType identificationNumber addresses'	classVariableNames: ''	poolDictionaries: ''	category: 'IS1-CustomerImport-Model'!!Customer methodsFor: 'identification' stamp: 'HernanWilkinson 10/28/2016 16:13'!identificationType		^identificationType ! !!Customer methodsFor: 'identification' stamp: 'GAC 6/19/2018 00:31'!sameData: aCustomer	^ (((firstName = aCustomer firstName) 		and: [lastName = aCustomer lastName])		and: [identificationType = aCustomer identificationType])		and: [identificationNumber  = aCustomer identificationNumber].! !!Customer methodsFor: 'identification' stamp: 'HernanWilkinson 10/28/2016 13:10'!identificationNumber: anIdentificationNumber 	identificationNumber := anIdentificationNumber! !!Customer methodsFor: 'identification' stamp: 'HernanWilkinson 10/28/2016 16:13'!identificationNumber		^identificationNumber ! !!Customer methodsFor: 'identification' stamp: 'HernanWilkinson 10/28/2016 13:10'!identificationType: anIdentificationType 	identificationType := anIdentificationType! !!Customer methodsFor: 'addresses' stamp: 'HernanWilkinson 10/28/2016 13:25'!addresses	^ addresses! !!Customer methodsFor: 'addresses' stamp: 'HernanWilkinson 10/28/2016 13:27'!addAddress: anAddress 	addresses add: anAddress ! !!Customer methodsFor: 'name' stamp: 'HernanWilkinson 10/28/2016 13:09'!lastName: aLastName 	lastName := aLastName! !!Customer methodsFor: 'name' stamp: 'HernanWilkinson 10/28/2016 16:15'!firstName		^firstName ! !!Customer methodsFor: 'name' stamp: 'HernanWilkinson 10/28/2016 13:09'!firstName: aName 	firstName := aName! !!Customer methodsFor: 'name' stamp: 'HernanWilkinson 10/28/2016 16:15'!lastName	^lastName ! !!Customer methodsFor: 'name' stamp: 'GAC 6/19/2018 00:13'!printString	^ firstName,' ',lastName.! !!Customer methodsFor: 'name' stamp: 'GAC 6/19/2018 02:39'!isMyAddresses: aAddresses 	^ (addresses select: [:a | aAddresses sameData: a ]) isEmpty not.	! !!Customer methodsFor: 'name' stamp: 'GAC 6/19/2018 02:30'!isMyAddress: aAddress 	^ (addresses select: [:a | aAddress sameData: a ]) isEmpty not.	! !!Customer methodsFor: 'initialization' stamp: 'HernanWilkinson 10/28/2016 13:26'!initialize	super initialize.	addresses := OrderedCollection new.! !!Customer methodsFor: 'initialization' stamp: 'GAC 6/18/2018 21:38'!initializeFirstName: aFirstName lastName: aLastName idType: aType idNumber: aNumber withAddresses: aAddress.			firstName := aFirstName.	lastName := aLastName.	identificationType := aType.	identificationNumber := aNumber.	addresses := aAddress.! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!Customer class	instanceVariableNames: 'test'!!Customer class methodsFor: 'accessing' stamp: 'GAC 6/18/2018 21:40'!firstName: aFirstName lastName: aLastName idType: aIdType idNumber: aIdNumber withAddresses: aAddresses	| aCustomer |	aCustomer := self new.	aCustomer initializeFirstName: aFirstName lastName: aLastName  idType: aIdType  idNumber: aIdNumber  withAddresses: aAddresses.	^ aCustomer.! !!Customer class methodsFor: 'importing' stamp: 'GermanCuacci 6/18/2018 20:30'!importCustomers	"	self importCustomers	"	test importCustomers! !TestCase subclass: #CustomerImportTest	instanceVariableNames: 'session inputStream aSessionAddress'	classVariableNames: ''	poolDictionaries: ''	category: 'IS1-CustomerImport-Model'!!CustomerImportTest methodsFor: 'tests' stamp: 'GAC 6/19/2018 02:37'!test01CustomersAndAddressIsTheSameInTheInputStream	| aAddressesPepe aCustomerPepe aAddressesJuan aCustomerJuan aSessionCustomers | 			aAddressesPepe := OrderedCollection with: (Address streetName: 'San Martin' streetNumber: 3322 town: 'Olivos' province: 'BsAs'  zipCode: 1636)							with: (Address streetName: 'Maipu' streetNumber: 888 town: 'Florida' province: 'Buenos Aires'  zipCode: 1122).	aAddressesJuan := OrderedCollection with: (Address streetName: 'Alem' streetNumber: 1122 town: 'CABA' province: 'CABA'  zipCode: 1001).		aCustomerPepe := Customer firstName: 'Pepe' lastName: 'Sanchez' idType: 'D' idNumber: '22333444' withAddresses: aAddressesPepe.	aCustomerJuan := Customer firstName: 'Juan' lastName: 'Perez' idType: 'C' idNumber: '23-25666777-9' withAddresses: aAddressesJuan.						self importCustomers.	aSessionCustomers := (session selectAllOfType: Customer).	aSessionAddress := (session selectAllOfType: Address).	aSessionAddress do: [:a | Transcript show: a printString ].		self assert: aSessionCustomers size equals: 2.	self assert: aSessionAddress size equals: 3.		self assert:  (aSessionCustomers select: [:a | aCustomerJuan sameData: a]) size equals: 1.	self assert:  (aSessionCustomers select: [:a | aCustomerPepe sameData: a]) size equals: 1.	self assert:  (aSessionAddress select: [:a | (aCustomerPepe isMyAddress: a)]) size equals: 2.	self assert:  (aSessionAddress select: [:a | (aCustomerJuan isMyAddress: a)]) size equals: 1.! !!CustomerImportTest methodsFor: 'importing' stamp: 'GAC 6/18/2018 23:36'!closeInputStream	inputStream close! !!CustomerImportTest methodsFor: 'importing' stamp: 'GAC 6/19/2018 01:46'!importCustomers	"	self importCustomers	"	| newCustomer line |	line := inputStream nextLine.	[ line notNil ] whileTrue: [ (line beginsWith: 'C')				ifTrue: [ | customerData |					customerData := line substrings: {$,}.					newCustomer := Customer new.					newCustomer firstName: customerData second.					newCustomer lastName: customerData third.					newCustomer identificationType: customerData fourth.					newCustomer identificationNumber: customerData fifth.					session persist: newCustomer ].			(line beginsWith: 'A')				ifTrue: [ | addressData newAddress |					addressData := line substrings: {$,}.					newAddress := Address new.					newAddress streetName: addressData second.					newAddress streetNumber: addressData third asInteger.					newAddress town: addressData fourth.					newAddress zipCode: addressData fifth asInteger.					newAddress province: addressData sixth.					newCustomer addAddress: newAddress ].			line := inputStream nextLine ].! !!CustomerImportTest methodsFor: 'importing' stamp: 'GAC 6/18/2018 23:35'!beginInputStream	inputStream := FileStream fileNamed: 'input.txt'! !!CustomerImportTest methodsFor: 'importing' stamp: 'GAC 6/18/2018 23:36'!closeSessionDatabase	session commit.	session close! !!CustomerImportTest methodsFor: 'importing' stamp: 'GAC 6/18/2018 23:37'!tearDown	self closeSessionDatabase.	self closeInputStream.! !!CustomerImportTest methodsFor: 'importing' stamp: 'GAC 6/18/2018 23:35'!setUp	self beginSessionDatabase.	self beginInputStream! !!CustomerImportTest methodsFor: 'importing' stamp: 'GAC 6/18/2018 23:35'!beginSessionDatabase	session := DataBaseSession		for:			(Array				with:					(ClassMapping						withDefaultTableNameFor: Address						mappingAll:							(Array								with: (EmbededMapping withDefaultFieldNameFor: #streetName)								with: (EmbededMapping withDefaultFieldNameFor: #streetNumber)								with: (EmbededMapping withDefaultFieldNameFor: #town)								with: (EmbededMapping withDefaultFieldNameFor: #zipCode)								with: (EmbededMapping withDefaultFieldNameFor: #province)))				with:					(ClassMapping						withDefaultTableNameFor: Customer						mappingAll:							(Array								with: (EmbededMapping withDefaultFieldNameFor: #firstName)								with: (EmbededMapping withDefaultFieldNameFor: #lastName)								with: (EmbededMapping withDefaultFieldNameFor: #identificationType)								with: (EmbededMapping withDefaultFieldNameFor: #identificationNumber)								with: (OneToManyMapping withDefaultFieldNameFor: #addresses ofType: Address)))).	session open.	session beginTransaction! !'From Pharo6.0 of 13 May 2016 [Latest update: #60540] on 19 June 2018 at 2:39:17.57521 am'!!String methodsFor: '*IS1-CustomerImport' stamp: 'HernanWilkinson 10/31/2016 23:57'!asPlural		^self last = $s 		ifTrue: [ self, 'es' ]		ifFalse: [ self, 's' ]! !'From Pharo6.0 of 13 May 2016 [Latest update: #60540] on 19 June 2018 at 2:39:17.586642 am'!!Object methodsFor: '*IS1-CustomerImport' stamp: 'HernanWilkinson 10/31/2016 19:27'!toDo: aString 	! !